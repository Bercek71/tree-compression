### YamlMime:ManagedReference
items:
- uid: TreeStructures.TreeNode`1
  commentId: T:TreeStructures.TreeNode`1
  id: TreeNode`1
  parent: TreeStructures
  children:
  - TreeStructures.TreeNode`1.#ctor(`0)
  - TreeStructures.TreeNode`1.Add(TreeStructures.TreeNode{`0},TreeStructures.Direction)
  - TreeStructures.TreeNode`1.Left
  - TreeStructures.TreeNode`1.Right
  - TreeStructures.TreeNode`1.Value
  langs:
  - csharp
  - vb
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: TreeStructures.TreeNode<T>
  type: Class
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: TreeNode
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 2
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public class TreeNode<T>
    typeParameters:
    - id: T
    content.vb: Public Class TreeNode(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TreeNode(Of T)
  fullName.vb: TreeStructures.TreeNode(Of T)
  name.vb: TreeNode(Of T)
- uid: TreeStructures.TreeNode`1.#ctor(`0)
  commentId: M:TreeStructures.TreeNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: TreeStructures.TreeNode`1
  langs:
  - csharp
  - vb
  name: TreeNode(T)
  nameWithType: TreeNode<T>.TreeNode(T)
  fullName: TreeStructures.TreeNode<T>.TreeNode(T)
  type: Constructor
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: .ctor
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 2
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public TreeNode(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: TreeStructures.TreeNode`1.#ctor*
  nameWithType.vb: TreeNode(Of T).New(T)
  fullName.vb: TreeStructures.TreeNode(Of T).New(T)
  name.vb: New(T)
- uid: TreeStructures.TreeNode`1.Left
  commentId: P:TreeStructures.TreeNode`1.Left
  id: Left
  parent: TreeStructures.TreeNode`1
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: TreeNode<T>.Left
  fullName: TreeStructures.TreeNode<T>.Left
  type: Property
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: Left
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 4
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public List<TreeNode<T>> Left { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TreeStructures.TreeNode`1}
    content.vb: Public ReadOnly Property Left As List(Of TreeNode(Of T))
  overload: TreeStructures.TreeNode`1.Left*
  nameWithType.vb: TreeNode(Of T).Left
  fullName.vb: TreeStructures.TreeNode(Of T).Left
- uid: TreeStructures.TreeNode`1.Right
  commentId: P:TreeStructures.TreeNode`1.Right
  id: Right
  parent: TreeStructures.TreeNode`1
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: TreeNode<T>.Right
  fullName: TreeStructures.TreeNode<T>.Right
  type: Property
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: Right
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 5
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public List<TreeNode<T>> Right { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TreeStructures.TreeNode`1}
    content.vb: Public ReadOnly Property Right As List(Of TreeNode(Of T))
  overload: TreeStructures.TreeNode`1.Right*
  nameWithType.vb: TreeNode(Of T).Right
  fullName.vb: TreeStructures.TreeNode(Of T).Right
- uid: TreeStructures.TreeNode`1.Value
  commentId: P:TreeStructures.TreeNode`1.Value
  id: Value
  parent: TreeStructures.TreeNode`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: TreeStructures.TreeNode<T>.Value
  type: Property
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: Value
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 6
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: TreeStructures.TreeNode`1.Value*
  nameWithType.vb: TreeNode(Of T).Value
  fullName.vb: TreeStructures.TreeNode(Of T).Value
- uid: TreeStructures.TreeNode`1.Add(TreeStructures.TreeNode{`0},TreeStructures.Direction)
  commentId: M:TreeStructures.TreeNode`1.Add(TreeStructures.TreeNode{`0},TreeStructures.Direction)
  id: Add(TreeStructures.TreeNode{`0},TreeStructures.Direction)
  parent: TreeStructures.TreeNode`1
  langs:
  - csharp
  - vb
  name: Add(TreeNode<T>, Direction)
  nameWithType: TreeNode<T>.Add(TreeNode<T>, Direction)
  fullName: TreeStructures.TreeNode<T>.Add(TreeStructures.TreeNode<T>, TreeStructures.Direction)
  type: Method
  source:
    remote:
      path: src/TreeStructures/TreeNode.cs
      branch: main
      repo: git@github.com:Bercek71/tree-compression.git
    id: Add
    path: ../src/TreeStructures/TreeNode.cs
    startLine: 8
  assemblies:
  - TreeStructures
  namespace: TreeStructures
  syntax:
    content: public void Add(TreeNode<T> node, Direction direction)
    parameters:
    - id: node
      type: TreeStructures.TreeNode`1
    - id: direction
      type: TreeStructures.Direction
    content.vb: Public Sub Add(node As TreeNode(Of T), direction As Direction)
  overload: TreeStructures.TreeNode`1.Add*
  nameWithType.vb: TreeNode(Of T).Add(TreeNode(Of T), Direction)
  fullName.vb: TreeStructures.TreeNode(Of T).Add(TreeStructures.TreeNode(Of T), TreeStructures.Direction)
  name.vb: Add(TreeNode(Of T), Direction)
references:
- uid: TreeStructures
  commentId: N:TreeStructures
  href: TreeStructures.html
  name: TreeStructures
  nameWithType: TreeStructures
  fullName: TreeStructures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TreeStructures.TreeNode`1.#ctor*
  commentId: Overload:TreeStructures.TreeNode`1.#ctor
  href: TreeStructures.TreeNode-1.html#TreeStructures_TreeNode_1__ctor__0_
  name: TreeNode
  nameWithType: TreeNode<T>.TreeNode
  fullName: TreeStructures.TreeNode<T>.TreeNode
  nameWithType.vb: TreeNode(Of T).New
  fullName.vb: TreeStructures.TreeNode(Of T).New
  name.vb: New
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TreeStructures.TreeNode`1.Left*
  commentId: Overload:TreeStructures.TreeNode`1.Left
  href: TreeStructures.TreeNode-1.html#TreeStructures_TreeNode_1_Left
  name: Left
  nameWithType: TreeNode<T>.Left
  fullName: TreeStructures.TreeNode<T>.Left
  nameWithType.vb: TreeNode(Of T).Left
  fullName.vb: TreeStructures.TreeNode(Of T).Left
- uid: System.Collections.Generic.List{TreeStructures.TreeNode`1}
  commentId: T:System.Collections.Generic.List{TreeStructures.TreeNode`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TreeNode<T>>
  nameWithType: List<TreeNode<T>>
  fullName: System.Collections.Generic.List<TreeStructures.TreeNode<T>>
  nameWithType.vb: List(Of TreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of TreeStructures.TreeNode(Of T))
  name.vb: List(Of TreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TreeStructures.TreeNode`1
    name: TreeNode
    href: TreeStructures.TreeNode-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TreeStructures.TreeNode`1
    name: TreeNode
    href: TreeStructures.TreeNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TreeStructures.TreeNode`1.Right*
  commentId: Overload:TreeStructures.TreeNode`1.Right
  href: TreeStructures.TreeNode-1.html#TreeStructures_TreeNode_1_Right
  name: Right
  nameWithType: TreeNode<T>.Right
  fullName: TreeStructures.TreeNode<T>.Right
  nameWithType.vb: TreeNode(Of T).Right
  fullName.vb: TreeStructures.TreeNode(Of T).Right
- uid: TreeStructures.TreeNode`1.Value*
  commentId: Overload:TreeStructures.TreeNode`1.Value
  href: TreeStructures.TreeNode-1.html#TreeStructures_TreeNode_1_Value
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: TreeStructures.TreeNode<T>.Value
  nameWithType.vb: TreeNode(Of T).Value
  fullName.vb: TreeStructures.TreeNode(Of T).Value
- uid: TreeStructures.TreeNode`1.Add*
  commentId: Overload:TreeStructures.TreeNode`1.Add
  href: TreeStructures.TreeNode-1.html#TreeStructures_TreeNode_1_Add_TreeStructures_TreeNode__0__TreeStructures_Direction_
  name: Add
  nameWithType: TreeNode<T>.Add
  fullName: TreeStructures.TreeNode<T>.Add
  nameWithType.vb: TreeNode(Of T).Add
  fullName.vb: TreeStructures.TreeNode(Of T).Add
- uid: TreeStructures.TreeNode`1
  commentId: T:TreeStructures.TreeNode`1
  parent: TreeStructures
  href: TreeStructures.TreeNode-1.html
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: TreeStructures.TreeNode<T>
  nameWithType.vb: TreeNode(Of T)
  fullName.vb: TreeStructures.TreeNode(Of T)
  name.vb: TreeNode(Of T)
  spec.csharp:
  - uid: TreeStructures.TreeNode`1
    name: TreeNode
    href: TreeStructures.TreeNode-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: TreeStructures.TreeNode`1
    name: TreeNode
    href: TreeStructures.TreeNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TreeStructures.Direction
  commentId: T:TreeStructures.Direction
  parent: TreeStructures
  href: TreeStructures.Direction.html
  name: Direction
  nameWithType: Direction
  fullName: TreeStructures.Direction
