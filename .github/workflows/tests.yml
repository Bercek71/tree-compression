name: Tree Compression Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['7.0.x', '9.0.x']  # Test with both .NET 7 and .NET 9

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'HtmlInline;Cobertura'
          verbosity: 'Info'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.dotnet-version }}
          path: CoverageReport

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: TestResults

  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          
      - name: Begin SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"TreeCompressionLibrary" /o:"your-sonarcloud-organization" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
        continue-on-error: true  # Make this optional in case SONAR_TOKEN is not configured
        
      - name: Build for Analysis
        run: dotnet build --configuration Release
        
      - name: End SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        continue-on-error: true  # Make this optional

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')  # Only run on main/master

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run Performance Tests
        run: |
          # You can add your custom performance test command here
          # Example: dotnet run --project src/PerformanceTests/PerformanceTests.csproj --configuration Release
          echo "Running performance tests..."
        continue-on-error: true  # Optional tests for now

      - name: Archive performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
        if: always()
