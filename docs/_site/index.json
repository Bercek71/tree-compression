{
  "api/ConsoleApp.Commands.EnglishMorphoditaDict.html": {
    "href": "api/ConsoleApp.Commands.EnglishMorphoditaDict.html",
    "title": "Class EnglishMorphoditaDict | Komprese stromových struktur",
    "summary": "Class EnglishMorphoditaDict Namespace ConsoleApp.Commands Assembly ConsoleApp.dll public class EnglishMorphoditaDict : ICommand Inheritance object EnglishMorphoditaDict Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute() public void Execute()"
  },
  "api/ConsoleApp.Commands.EnglishMorphoditaTagger.html": {
    "href": "api/ConsoleApp.Commands.EnglishMorphoditaTagger.html",
    "title": "Class EnglishMorphoditaTagger | Komprese stromových struktur",
    "summary": "Class EnglishMorphoditaTagger Namespace ConsoleApp.Commands Assembly ConsoleApp.dll public class EnglishMorphoditaTagger : ICommand Inheritance object EnglishMorphoditaTagger Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute() public void Execute()"
  },
  "api/ConsoleApp.Commands.FrameworkTest.html": {
    "href": "api/ConsoleApp.Commands.FrameworkTest.html",
    "title": "Class FrameworkTest | Komprese stromových struktur",
    "summary": "Class FrameworkTest Namespace ConsoleApp.Commands Assembly ConsoleApp.dll public class FrameworkTest : ICommand Inheritance object FrameworkTest Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InputFile [RequireArgument(\"input\", \"The input string to compress\", true)] public string InputFile { get; set; } Property Value string Methods Execute() public void Execute()"
  },
  "api/ConsoleApp.Commands.html": {
    "href": "api/ConsoleApp.Commands.html",
    "title": "Namespace ConsoleApp.Commands | Komprese stromových struktur",
    "summary": "Namespace ConsoleApp.Commands Classes EnglishMorphoditaDict EnglishMorphoditaTagger FrameworkTest"
  },
  "api/ConsoleApp.Framework.Argument.html": {
    "href": "api/ConsoleApp.Framework.Argument.html",
    "title": "Class Argument | Komprese stromových struktur",
    "summary": "Class Argument Namespace ConsoleApp.Framework Assembly ConsoleApp.dll public class Argument Inheritance object Argument Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description public string Description { get; init; } Property Value string IsRequired public bool IsRequired { get; init; } Property Value bool Name public string Name { get; init; } Property Value string Shortcut public string Shortcut { get; } Property Value string Value public string? Value { get; set; } Property Value string"
  },
  "api/ConsoleApp.Framework.ArgumentParser.html": {
    "href": "api/ConsoleApp.Framework.ArgumentParser.html",
    "title": "Class ArgumentParser | Komprese stromových struktur",
    "summary": "Class ArgumentParser Namespace ConsoleApp.Framework Assembly ConsoleApp.dll public class ArgumentParser Inheritance object ArgumentParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BindArguments(object, string[]) public static void BindArguments(object target, string[] args) Parameters target object args string[]"
  },
  "api/ConsoleApp.Framework.CommandRegistry.html": {
    "href": "api/ConsoleApp.Framework.CommandRegistry.html",
    "title": "Class CommandRegistry | Komprese stromových struktur",
    "summary": "Class CommandRegistry Namespace ConsoleApp.Framework Assembly ConsoleApp.dll public static class CommandRegistry Inheritance object CommandRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateCommand(string, string[]) public static ICommand? CreateCommand(string commandName, string[] args) Parameters commandName string args string[] Returns ICommand"
  },
  "api/ConsoleApp.Framework.HelpHelper.html": {
    "href": "api/ConsoleApp.Framework.HelpHelper.html",
    "title": "Class HelpHelper | Komprese stromových struktur",
    "summary": "Class HelpHelper Namespace ConsoleApp.Framework Assembly ConsoleApp.dll public class HelpHelper Inheritance object HelpHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetHelp() public static string GetHelp() Returns string"
  },
  "api/ConsoleApp.Framework.ICommand.html": {
    "href": "api/ConsoleApp.Framework.ICommand.html",
    "title": "Interface ICommand | Komprese stromových struktur",
    "summary": "Interface ICommand Namespace ConsoleApp.Framework Assembly ConsoleApp.dll public interface ICommand Methods Execute() void Execute()"
  },
  "api/ConsoleApp.Framework.RequireArgumentAttribute.html": {
    "href": "api/ConsoleApp.Framework.RequireArgumentAttribute.html",
    "title": "Class RequireArgumentAttribute | Komprese stromových struktur",
    "summary": "Class RequireArgumentAttribute Namespace ConsoleApp.Framework Assembly ConsoleApp.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class RequireArgumentAttribute : Attribute Inheritance object Attribute RequireArgumentAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireArgumentAttribute(string, string, bool) public RequireArgumentAttribute(string name, string description, bool required = true) Parameters name string description string required bool Properties Description public string Description { get; } Property Value string Name public string Name { get; } Property Value string Required public bool Required { get; } Property Value bool"
  },
  "api/ConsoleApp.Framework.html": {
    "href": "api/ConsoleApp.Framework.html",
    "title": "Namespace ConsoleApp.Framework | Komprese stromových struktur",
    "summary": "Namespace ConsoleApp.Framework Classes Argument ArgumentParser CommandRegistry HelpHelper RequireArgumentAttribute Interfaces ICommand"
  },
  "api/ConsoleApp.Program.html": {
    "href": "api/ConsoleApp.Program.html",
    "title": "Class Program | Komprese stromových struktur",
    "summary": "Class Program Namespace ConsoleApp Assembly ConsoleApp.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/ConsoleApp.html": {
    "href": "api/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Komprese stromových struktur",
    "summary": "Namespace ConsoleApp Classes Program"
  },
  "api/TreeCompressionAlgorithms.CompressionStrategies.DictionaryTreeCompressor.html": {
    "href": "api/TreeCompressionAlgorithms.CompressionStrategies.DictionaryTreeCompressor.html",
    "title": "Class DictionaryTreeCompressor | Komprese stromových struktur",
    "summary": "Class DictionaryTreeCompressor Namespace TreeCompressionAlgorithms.CompressionStrategies Assembly TreeCompressionAlgorithms.dll public class DictionaryTreeCompressor : ICompressionStrategy<ISyntacticTreeNode> Inheritance object DictionaryTreeCompressor Implements ICompressionStrategy<ISyntacticTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compress(ISyntacticTreeNode?) Komprimuje stromovou strukturu. public CompressedTree Compress(ISyntacticTreeNode? tree) Parameters tree ISyntacticTreeNode Strom pro kompresi. Returns CompressedTree Komprimovaný strom. Decompress(CompressedTree?) Dekomprimuje stromovou strukturu. public ISyntacticTreeNode Decompress(CompressedTree? compressedTree) Parameters compressedTree CompressedTree Dekomprimovaný strom. Returns ISyntacticTreeNode Původní stromová struktura."
  },
  "api/TreeCompressionAlgorithms.CompressionStrategies.TreeRePairStrategy.html": {
    "href": "api/TreeCompressionAlgorithms.CompressionStrategies.TreeRePairStrategy.html",
    "title": "Class TreeRePairStrategy | Komprese stromových struktur",
    "summary": "Class TreeRePairStrategy Namespace TreeCompressionAlgorithms.CompressionStrategies Assembly TreeCompressionAlgorithms.dll TreeRePair kompresní strategie pro kompresi a dekompresi stromové struktury. public class TreeRePairStrategy : ICompressionStrategy<ISyntacticTreeNode> Inheritance object TreeRePairStrategy Implements ICompressionStrategy<ISyntacticTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compress(ISyntacticTreeNode?) Komprimuje stromovou strukturu. public CompressedTree Compress(ISyntacticTreeNode? tree) Parameters tree ISyntacticTreeNode Strom pro kompresi. Returns CompressedTree Komprimovaný strom. Decompress(CompressedTree?) Dekomprimuje stromovou strukturu. public ISyntacticTreeNode Decompress(CompressedTree? compressedTree) Parameters compressedTree CompressedTree Dekomprimovaný strom. Returns ISyntacticTreeNode Původní stromová struktura."
  },
  "api/TreeCompressionAlgorithms.CompressionStrategies.html": {
    "href": "api/TreeCompressionAlgorithms.CompressionStrategies.html",
    "title": "Namespace TreeCompressionAlgorithms.CompressionStrategies | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionAlgorithms.CompressionStrategies Classes DictionaryTreeCompressor TreeRePairStrategy TreeRePair kompresní strategie pro kompresi a dekompresi stromové struktury."
  },
  "api/TreeCompressionAlgorithms.Extensions.XmlTagExtension.html": {
    "href": "api/TreeCompressionAlgorithms.Extensions.XmlTagExtension.html",
    "title": "Class XmlTagExtension | Komprese stromových struktur",
    "summary": "Class XmlTagExtension Namespace TreeCompressionAlgorithms.Extensions Assembly TreeCompressionAlgorithms.dll public static class XmlTagExtension Inheritance object XmlTagExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TreeCompressionAlgorithms.Extensions.html": {
    "href": "api/TreeCompressionAlgorithms.Extensions.html",
    "title": "Namespace TreeCompressionAlgorithms.Extensions | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionAlgorithms.Extensions Classes XmlTagExtension"
  },
  "api/TreeCompressionAlgorithms.NaturalLanguageTreeCompressing.html": {
    "href": "api/TreeCompressionAlgorithms.NaturalLanguageTreeCompressing.html",
    "title": "Class NaturalLanguageTreeCompressing | Komprese stromových struktur",
    "summary": "Class NaturalLanguageTreeCompressing Namespace TreeCompressionAlgorithms Assembly TreeCompressionAlgorithms.dll public class NaturalLanguageTreeCompressing : ITreeCompressor<ISyntacticTreeNode> Inheritance object NaturalLanguageTreeCompressing Implements ITreeCompressor<ISyntacticTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NaturalLanguageTreeCompressing(ICompressionStrategy<ISyntacticTreeNode>) public NaturalLanguageTreeCompressing(ICompressionStrategy<ISyntacticTreeNode> compressionStrategy) Parameters compressionStrategy ICompressionStrategy<ISyntacticTreeNode> Properties CompressingPipeline Pipeline pro kompresi stromu. public Pipeline CompressingPipeline { get; } Property Value Pipeline CompressionStrategy Kompresní strategie, která je použita pro kompresi stromu. public ICompressionStrategy<ISyntacticTreeNode> CompressionStrategy { get; } Property Value ICompressionStrategy<ISyntacticTreeNode> DecompressingPipeline Pipeline pro dekompresi stromu. public Pipeline DecompressingPipeline { get; } Property Value Pipeline Methods Compress(string) Metoda pro kompresi stromu. public CompressedTree Compress(string text) Parameters text string Text, který by se měl převést do stromové struktury a komprimovat. Returns CompressedTree Decompress(CompressedTree) Metoda pro dekompresi stromu. public string Decompress(CompressedTree compressedTree) Parameters compressedTree CompressedTree Komprimovaný strom, který by se měl dekomprimovat. Returns string Text, který byl dekomprimován ze stromové struktury."
  },
  "api/TreeCompressionAlgorithms.TreeCreationalStrategies.UdPipeCreateTreeStrategy.html": {
    "href": "api/TreeCompressionAlgorithms.TreeCreationalStrategies.UdPipeCreateTreeStrategy.html",
    "title": "Class UdPipeCreateTreeStrategy | Komprese stromových struktur",
    "summary": "Class UdPipeCreateTreeStrategy Namespace TreeCompressionAlgorithms.TreeCreationalStrategies Assembly TreeCompressionAlgorithms.dll Využití UDPipe pro vytvoření stromové struktury. public class UdPipeCreateTreeStrategy : ITreeCreationStrategy<ISyntacticTreeNode> Inheritance object UdPipeCreateTreeStrategy Implements ITreeCreationStrategy<ISyntacticTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateTree(string) Metoda pro vytvoření stromové struktury z textu. public ISyntacticTreeNode CreateTree(string data) Parameters data string Returns ISyntacticTreeNode Vrací vytvořenou stromovou strukturu daného typu."
  },
  "api/TreeCompressionAlgorithms.TreeCreationalStrategies.XmlCreateTreeStrategy.html": {
    "href": "api/TreeCompressionAlgorithms.TreeCreationalStrategies.XmlCreateTreeStrategy.html",
    "title": "Class XmlCreateTreeStrategy | Komprese stromových struktur",
    "summary": "Class XmlCreateTreeStrategy Namespace TreeCompressionAlgorithms.TreeCreationalStrategies Assembly TreeCompressionAlgorithms.dll public class XmlCreateTreeStrategy : ITreeCreationStrategy<IOrderedTreeNode> Inheritance object XmlCreateTreeStrategy Implements ITreeCreationStrategy<IOrderedTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateTree(string) Metoda pro vytvoření stromové struktury z textu. public IOrderedTreeNode CreateTree(string text) Parameters text string Text, který by se měl převést do stromové struktury. Returns IOrderedTreeNode Vrací vytvořenou stromovou strukturu daného typu."
  },
  "api/TreeCompressionAlgorithms.TreeCreationalStrategies.html": {
    "href": "api/TreeCompressionAlgorithms.TreeCreationalStrategies.html",
    "title": "Namespace TreeCompressionAlgorithms.TreeCreationalStrategies | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionAlgorithms.TreeCreationalStrategies Classes UdPipeCreateTreeStrategy Využití UDPipe pro vytvoření stromové struktury. XmlCreateTreeStrategy"
  },
  "api/TreeCompressionAlgorithms.XmlTreeCompressing.html": {
    "href": "api/TreeCompressionAlgorithms.XmlTreeCompressing.html",
    "title": "Class XmlTreeCompressing | Komprese stromových struktur",
    "summary": "Class XmlTreeCompressing Namespace TreeCompressionAlgorithms Assembly TreeCompressionAlgorithms.dll public class XmlTreeCompressing : ITreeCompressor<IOrderedTreeNode> Inheritance object XmlTreeCompressing Implements ITreeCompressor<IOrderedTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XmlTreeCompressing(ICompressionStrategy<IOrderedTreeNode>) public XmlTreeCompressing(ICompressionStrategy<IOrderedTreeNode> compressionStrategy) Parameters compressionStrategy ICompressionStrategy<IOrderedTreeNode> Properties CompressingPipeline Pipeline pro kompresi stromu. public Pipeline CompressingPipeline { get; } Property Value Pipeline CompressionStrategy Kompresní strategie, která je použita pro kompresi stromu. public ICompressionStrategy<IOrderedTreeNode> CompressionStrategy { get; } Property Value ICompressionStrategy<IOrderedTreeNode> DecompressingPipeline Pipeline pro dekompresi stromu. public Pipeline DecompressingPipeline { get; } Property Value Pipeline Methods Compress(string) Metoda pro kompresi stromu. public CompressedTree Compress(string text) Parameters text string Text, který by se měl převést do stromové struktury a komprimovat. Returns CompressedTree Decompress(CompressedTree) Metoda pro dekompresi stromu. public string Decompress(CompressedTree compressedTree) Parameters compressedTree CompressedTree Komprimovaný strom, který by se měl dekomprimovat. Returns string Text, který byl dekomprimován ze stromové struktury."
  },
  "api/TreeCompressionAlgorithms.html": {
    "href": "api/TreeCompressionAlgorithms.html",
    "title": "Namespace TreeCompressionAlgorithms | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionAlgorithms Classes NaturalLanguageTreeCompressing XmlTreeCompressing"
  },
  "api/TreeCompressionPipeline.CompressionStrategies.CompressionStrategy.html": {
    "href": "api/TreeCompressionPipeline.CompressionStrategies.CompressionStrategy.html",
    "title": "Class CompressionStrategy | Komprese stromových struktur",
    "summary": "Class CompressionStrategy Namespace TreeCompressionPipeline.CompressionStrategies Assembly TreeCompressionPipelineLib.dll [Obsolete(\"Ukázková třída, která byla použita pro ukázání principu komprese stromové struktury.\")] public abstract class CompressionStrategy : ICompressionStrategy<ITreeNode> Inheritance object CompressionStrategy Implements ICompressionStrategy<ITreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compress(ITreeNode) Komprimuje stromovou strukturu. public abstract CompressedTree Compress(ITreeNode tree) Parameters tree ITreeNode Strom pro kompresi. Returns CompressedTree Komprimovaný strom. Decompress(CompressedTree) Dekomprimuje stromovou strukturu. public abstract ITreeNode Decompress(CompressedTree compressedTree) Parameters compressedTree CompressedTree Dekomprimovaný strom. Returns ITreeNode Původní stromová struktura. FindPatterns(ITreeNode) protected Dictionary<string, int> FindPatterns(ITreeNode tree) Parameters tree ITreeNode Returns Dictionary<string, int>"
  },
  "api/TreeCompressionPipeline.CompressionStrategies.ICompressionStrategy-1.html": {
    "href": "api/TreeCompressionPipeline.CompressionStrategies.ICompressionStrategy-1.html",
    "title": "Interface ICompressionStrategy<T> | Komprese stromových struktur",
    "summary": "Interface ICompressionStrategy<T> Namespace TreeCompressionPipeline.CompressionStrategies Assembly TreeCompressionPipelineLib.dll Kompresní strategie pro kompresi a dekompresi stromové struktury. public interface ICompressionStrategy<T> Type Parameters T Typ stromové struktury, která je komprimována a dekomprimována. Methods Compress(T) Komprimuje stromovou strukturu. CompressedTree Compress(T tree) Parameters tree T Strom pro kompresi. Returns CompressedTree Komprimovaný strom. Decompress(CompressedTree) Dekomprimuje stromovou strukturu. T Decompress(CompressedTree compressedTree) Parameters compressedTree CompressedTree Dekomprimovaný strom. Returns T Původní stromová struktura."
  },
  "api/TreeCompressionPipeline.CompressionStrategies.html": {
    "href": "api/TreeCompressionPipeline.CompressionStrategies.html",
    "title": "Namespace TreeCompressionPipeline.CompressionStrategies | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionPipeline.CompressionStrategies Classes CompressionStrategy Interfaces ICompressionStrategy<T> Kompresní strategie pro kompresi a dekompresi stromové struktury."
  },
  "api/TreeCompressionPipeline.FilterBase-2.html": {
    "href": "api/TreeCompressionPipeline.FilterBase-2.html",
    "title": "Class FilterBase<T, TO> | Komprese stromových struktur",
    "summary": "Class FilterBase<T, TO> Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Implementace filtru pro pipeline. Filtr je základní jednotka pro zpracování dat v rámci pipeline. public abstract class FilterBase<T, TO> : IFilter, IProcessSubject Type Parameters T Vstupní typ dat, které filtr zpracovává. TO Výstupní typ dat, která filtr vrací. Inheritance object FilterBase<T, TO> Implements IFilter IProcessSubject Derived CompressionFilter<T> DecompressionFilter<T> TextToTreeFilter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddObserver(IProcessObserver) Přidání observeru, který bude sledovat průběh procesu. public void AddObserver(IProcessObserver observer) Parameters observer IProcessObserver Observer, který bude sledovat průběh procesu. Chain(IFilter) Metoda pro přidání dalšího filtru do řetězce filtrů pro zpracování dat. public IFilter Chain(IFilter nextFilter) Parameters nextFilter IFilter Další filtr, který bude následovat po aktuálním filtru. Returns IFilter Vrací odkaz na aktuální filtr, pro fluent chaining. NotifyComplete(string, object) Metoda pro oznámení observerům o dokončení procesu. public void NotifyComplete(string process, object result) Parameters process string Název procesu, který byl dokončen. result object Výsledek procesu, který může být libovolného typu. NotifyError(string, Exception) Metoda pro oznámení observerům o chybě v průběhu procesu. public void NotifyError(string process, Exception error) Parameters process string Název procesu, ve kterém došlo k chybě. error Exception Vyjímka, která nastala v průběhu procesu. NotifyProgress(string, double) Metoda by měla sloužit pouze pro debugging a testování průběhu procesu. public void NotifyProgress(string process, double percentComplete) Parameters process string Název procesu, který je sledován. percentComplete double Procenta dokončení procesu. NotifyStart(string) Metoda pro oznámení observerům o začátku procesu. public void NotifyStart(string process) Parameters process string Název procesu, který je spuštěn. Process(object) Implementace metody pro zpracování dat v rámci filtru. Přetypuje data na konkrétní typ a zavolá metodu pro zpracování dat. public object Process(object data) Parameters data object Data, která jsou zpracována v rámci filtru. Returns object Exceptions ArgumentException Pokud filtr obdrží data, která nejsou typu T. InvalidOperationException Pokud zpracování dat skončí chybou. ProcessData(T) Obálka pro zpracování dat v rámci filtru pro konkrétní typ dat. Musí se doimplementovat protected abstract TO ProcessData(T data) Parameters data T Data pro zpracování filtrem Returns TO Zpraocovaná data ve formě objektu, který může být libovolného typu. RemoveObserver(IProcessObserver) Odebrání observeru, který sledoval průběh procesu. public void RemoveObserver(IProcessObserver observer) Parameters observer IProcessObserver Observer, který sledoval průběh procesu. See Also IFilter"
  },
  "api/TreeCompressionPipeline.FilterFactory-1.html": {
    "href": "api/TreeCompressionPipeline.FilterFactory-1.html",
    "title": "Class FilterFactory<T> | Komprese stromových struktur",
    "summary": "Class FilterFactory<T> Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Továrna pro vytvoření filtrů v rámci pipeline. public abstract class FilterFactory<T> where T : ITreeNode Type Parameters T Typ uzlu stromu, který je zpracováván v rámci filtrů. Inheritance object FilterFactory<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateCompressionFilter(ICompressionStrategy<T>) Vytvoření filtru pro kompresi stromové struktury. public static IFilter CreateCompressionFilter(ICompressionStrategy<T> strategy) Parameters strategy ICompressionStrategy<T> Algoritmus pro kompresi a dekompresi stromové struktury. Musí být shodný se strategií pro dekompresi Returns IFilter Filtr pro kompresi stromové struktury. CreateDecompressionFilter(ICompressionStrategy<T>) Vytvoření filtru pro dekompresi stromové struktury. public static IFilter CreateDecompressionFilter(ICompressionStrategy<T> strategy) Parameters strategy ICompressionStrategy<T> Algoritmus pro kompresi a dekompresi stromové struktury. Musí být shodný se strategií pro kompresi. Returns IFilter Filtr pro dekompresi stromové struktury. CreateTextToTreeFilter(ITreeCreationStrategy<T>) Vytoření filtru pro převod textu na stromovou strukturu. public static IFilter CreateTextToTreeFilter(ITreeCreationStrategy<T> strategy) Parameters strategy ITreeCreationStrategy<T> Algoritmus pro vytvoření stromové struktury z textu. Returns IFilter Filtr pro převod textu na stromovou strukturu."
  },
  "api/TreeCompressionPipeline.Filters.CompressionFilter-1.html": {
    "href": "api/TreeCompressionPipeline.Filters.CompressionFilter-1.html",
    "title": "Class CompressionFilter<T> | Komprese stromových struktur",
    "summary": "Class CompressionFilter<T> Namespace TreeCompressionPipeline.Filters Assembly TreeCompressionPipelineLib.dll Filtr pro kompresi stromové struktury. public class CompressionFilter<T> : FilterBase<T, CompressedTree>, IFilter, IProcessSubject Type Parameters T Typ stromové struktury, která bude komprimována. Inheritance object FilterBase<T, CompressedTree> CompressionFilter<T> Implements IFilter IProcessSubject Inherited Members FilterBase<T, CompressedTree>.ProcessData(T) FilterBase<T, CompressedTree>.Process(object) FilterBase<T, CompressedTree>.Chain(IFilter) FilterBase<T, CompressedTree>.AddObserver(IProcessObserver) FilterBase<T, CompressedTree>.RemoveObserver(IProcessObserver) FilterBase<T, CompressedTree>.NotifyStart(string) FilterBase<T, CompressedTree>.NotifyProgress(string, double) FilterBase<T, CompressedTree>.NotifyComplete(string, object) FilterBase<T, CompressedTree>.NotifyError(string, Exception) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompressionFilter(ICompressionStrategy<T>) Filtr pro kompresi stromové struktury. public CompressionFilter(ICompressionStrategy<T> strategy) Parameters strategy ICompressionStrategy<T> Strategie komprese stromu. Methods ProcessData(T) Obálka pro zpracování dat v rámci filtru pro konkrétní typ dat. Musí se doimplementovat protected override CompressedTree ProcessData(T tree) Parameters tree T Returns CompressedTree Zpraocovaná data ve formě objektu, který může být libovolného typu."
  },
  "api/TreeCompressionPipeline.Filters.DecompressionFilter-1.html": {
    "href": "api/TreeCompressionPipeline.Filters.DecompressionFilter-1.html",
    "title": "Class DecompressionFilter<T> | Komprese stromových struktur",
    "summary": "Class DecompressionFilter<T> Namespace TreeCompressionPipeline.Filters Assembly TreeCompressionPipelineLib.dll Filtr pro dekompresi stromové struktury. public class DecompressionFilter<T> : FilterBase<CompressedTree, T>, IFilter, IProcessSubject where T : ITreeNode Type Parameters T Parametr typu stromové struktury. Inheritance object FilterBase<CompressedTree, T> DecompressionFilter<T> Implements IFilter IProcessSubject Inherited Members FilterBase<CompressedTree, T>.ProcessData(CompressedTree) FilterBase<CompressedTree, T>.Process(object) FilterBase<CompressedTree, T>.Chain(IFilter) FilterBase<CompressedTree, T>.AddObserver(IProcessObserver) FilterBase<CompressedTree, T>.RemoveObserver(IProcessObserver) FilterBase<CompressedTree, T>.NotifyStart(string) FilterBase<CompressedTree, T>.NotifyProgress(string, double) FilterBase<CompressedTree, T>.NotifyComplete(string, object) FilterBase<CompressedTree, T>.NotifyError(string, Exception) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DecompressionFilter(ICompressionStrategy<T>) Filtr pro dekompresi stromové struktury. public DecompressionFilter(ICompressionStrategy<T> strategy) Parameters strategy ICompressionStrategy<T> Kompresní strategie, která je použita pro dekompresi stromu. Methods ProcessData(CompressedTree) Obálka pro zpracování dat v rámci filtru pro konkrétní typ dat. Musí se doimplementovat protected override T ProcessData(CompressedTree compressedTree) Parameters compressedTree CompressedTree Returns T Zpraocovaná data ve formě objektu, který může být libovolného typu."
  },
  "api/TreeCompressionPipeline.Filters.TextToTreeFilter-1.html": {
    "href": "api/TreeCompressionPipeline.Filters.TextToTreeFilter-1.html",
    "title": "Class TextToTreeFilter<T> | Komprese stromových struktur",
    "summary": "Class TextToTreeFilter<T> Namespace TreeCompressionPipeline.Filters Assembly TreeCompressionPipelineLib.dll Filtr pro převod textu na stromovou strukturu. public class TextToTreeFilter<T> : FilterBase<string, T>, IFilter, IProcessSubject where T : ITreeNode Type Parameters T Typ stromové struktury, která bude vytvořena. Inheritance object FilterBase<string, T> TextToTreeFilter<T> Implements IFilter IProcessSubject Inherited Members FilterBase<string, T>.ProcessData(string) FilterBase<string, T>.Process(object) FilterBase<string, T>.Chain(IFilter) FilterBase<string, T>.AddObserver(IProcessObserver) FilterBase<string, T>.RemoveObserver(IProcessObserver) FilterBase<string, T>.NotifyStart(string) FilterBase<string, T>.NotifyProgress(string, double) FilterBase<string, T>.NotifyComplete(string, object) FilterBase<string, T>.NotifyError(string, Exception) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextToTreeFilter(ITreeCreationStrategy<T>) Filtr pro převod textu na stromovou strukturu. public TextToTreeFilter(ITreeCreationStrategy<T> creationStrategy) Parameters creationStrategy ITreeCreationStrategy<T> Strategie pro vytvoření stromové struktury z textu. Methods ProcessData(string) Obálka pro zpracování dat v rámci filtru pro konkrétní typ dat. Musí se doimplementovat protected override T ProcessData(string text) Parameters text string Returns T Zpraocovaná data ve formě objektu, který může být libovolného typu."
  },
  "api/TreeCompressionPipeline.Filters.html": {
    "href": "api/TreeCompressionPipeline.Filters.html",
    "title": "Namespace TreeCompressionPipeline.Filters | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionPipeline.Filters Classes CompressionFilter<T> Filtr pro kompresi stromové struktury. DecompressionFilter<T> Filtr pro dekompresi stromové struktury. TextToTreeFilter<T> Filtr pro převod textu na stromovou strukturu."
  },
  "api/TreeCompressionPipeline.IFilter.html": {
    "href": "api/TreeCompressionPipeline.IFilter.html",
    "title": "Interface IFilter | Komprese stromových struktur",
    "summary": "Interface IFilter Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Rozhraní pro vytvoření filtru v rámci pipeline. Projekt využívá architekturu Pipes and Filters. Filtr představuje jednotku zpracování dat. Dědí z rozhraní IProcessSubject, které definuje metody pro přidání a odebrání observerů. public interface IFilter : IProcessSubject Inherited Members IProcessSubject.AddObserver(IProcessObserver) IProcessSubject.RemoveObserver(IProcessObserver) IProcessSubject.NotifyStart(string) IProcessSubject.NotifyProgress(string, double) IProcessSubject.NotifyComplete(string, object) IProcessSubject.NotifyError(string, Exception) Methods Chain(IFilter) Metoda pro přidání dalšího filtru do řetězce filtrů pro zpracování dat. IFilter Chain(IFilter nextFilter) Parameters nextFilter IFilter Další filtr, který bude následovat po aktuálním filtru. Returns IFilter Vrací odkaz na aktuální filtr, pro fluent chaining. Process(object) Metoda pro zpracování dat v rámci filtru. object Process(object data) Parameters data object Přijatá data pro zpracování ve formě objektu, který může být libovolného typu. Returns object Vrací zpracovaná data ve formě objektu, který může být libovolného typu."
  },
  "api/TreeCompressionPipeline.IProcessObserver.html": {
    "href": "api/TreeCompressionPipeline.IProcessObserver.html",
    "title": "Interface IProcessObserver | Komprese stromových struktur",
    "summary": "Interface IProcessObserver Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Definuje rozhraní pro observera, který sleduje průběh procesu. public interface IProcessObserver Methods OnComplete(string, object) Metoda, která je volána při dokončení procesu. void OnComplete(string process, object result) Parameters process string Název procesu, který byl dokončen. result object Výsledek procesu, který může být libovolného typu. OnError(string, Exception) Metoda, která je volána při chybě v průběhu procesu. void OnError(string process, Exception error) Parameters process string Název procesu, ve kterém došlo k chybě. error Exception Vyjímka, která popisuje chybu v průběhu procesu. OnProgress(string, double) Metoda, která je volána při průběhu procesu. [Obsolete(\"Metoda by měla sloužit pouze pro debugging a testování.\")] void OnProgress(string process, double percentComplete) Parameters process string Název procesu, který je sledován. percentComplete double Procenta dokončení procesu. OnStart(string) Metoda, která je volána při spuštění procesu. void OnStart(string process) Parameters process string Název procesu, který je spuštěn."
  },
  "api/TreeCompressionPipeline.IProcessSubject.html": {
    "href": "api/TreeCompressionPipeline.IProcessSubject.html",
    "title": "Interface IProcessSubject | Komprese stromových struktur",
    "summary": "Interface IProcessSubject Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Rozhraní pro definici subjektu, díky kterému mohou observeři sledovat průběh procesu. public interface IProcessSubject Methods AddObserver(IProcessObserver) Přidání observeru, který bude sledovat průběh procesu. void AddObserver(IProcessObserver observer) Parameters observer IProcessObserver Observer, který bude sledovat průběh procesu. NotifyComplete(string, object) Metoda pro oznámení observerům o dokončení procesu. void NotifyComplete(string process, object result) Parameters process string Název procesu, který byl dokončen. result object Výsledek procesu, který může být libovolného typu. NotifyError(string, Exception) Metoda pro oznámení observerům o chybě v průběhu procesu. void NotifyError(string process, Exception error) Parameters process string Název procesu, ve kterém došlo k chybě. error Exception Vyjímka, která nastala v průběhu procesu. NotifyProgress(string, double) Metoda by měla sloužit pouze pro debugging a testování průběhu procesu. [Obsolete(\"Metoda by měla sloužit pouze pro debugging a testování.\")] void NotifyProgress(string process, double percentComplete) Parameters process string Název procesu, který je sledován. percentComplete double Procenta dokončení procesu. NotifyStart(string) Metoda pro oznámení observerům o začátku procesu. void NotifyStart(string process) Parameters process string Název procesu, který je spuštěn. RemoveObserver(IProcessObserver) Odebrání observeru, který sledoval průběh procesu. void RemoveObserver(IProcessObserver observer) Parameters observer IProcessObserver Observer, který sledoval průběh procesu."
  },
  "api/TreeCompressionPipeline.ITreeCompressor-1.html": {
    "href": "api/TreeCompressionPipeline.ITreeCompressor-1.html",
    "title": "Interface ITreeCompressor<T> | Komprese stromových struktur",
    "summary": "Interface ITreeCompressor<T> Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Rozhraní, které definuje metody pro kompresi a dekompresi stromu. public interface ITreeCompressor<T> where T : ITreeNode Type Parameters T Typ stromu, který je komprimován a dekomprimován. Properties CompressingPipeline Pipeline pro kompresi stromu. Pipeline CompressingPipeline { get; } Property Value Pipeline CompressionStrategy Kompresní strategie, která je použita pro kompresi stromu. ICompressionStrategy<T> CompressionStrategy { get; } Property Value ICompressionStrategy<T> DecompressingPipeline Pipeline pro dekompresi stromu. Pipeline DecompressingPipeline { get; } Property Value Pipeline Methods Compress(string) Metoda pro kompresi stromu. CompressedTree Compress(string text) Parameters text string Text, který by se měl převést do stromové struktury a komprimovat. Returns CompressedTree Decompress(CompressedTree) Metoda pro dekompresi stromu. string Decompress(CompressedTree compressedTree) Parameters compressedTree CompressedTree Komprimovaný strom, který by se měl dekomprimovat. Returns string Text, který byl dekomprimován ze stromové struktury."
  },
  "api/TreeCompressionPipeline.Pipeline.html": {
    "href": "api/TreeCompressionPipeline.Pipeline.html",
    "title": "Class Pipeline | Komprese stromových struktur",
    "summary": "Class Pipeline Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Pipeline pro zpracování dat v rámci Pipes and Filters architektury. Pipeline je tvořena jednotlivými filtry, které zpracovávají data. public class Pipeline Inheritance object Pipeline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProcessObserver Observer, který sleduje průběh procesu. public IProcessObserver? ProcessObserver { get; init; } Property Value IProcessObserver Methods AddFilter(IFilter) Přidání filtru do pipeline public Pipeline AddFilter(IFilter filter) Parameters filter IFilter Filtr pro zpracování dat. Returns Pipeline Vrací odkaz na pipeline pro fluent chaining. Process(object) Zpracování dat v rámci pipeline. public object Process(object input) Parameters input object Vstupní data pro zpracování v rámci filtrů Returns object Vrací zpracovaná data ve formě objektu, který může být libovolného typu."
  },
  "api/TreeCompressionPipeline.ProcessMonitor.html": {
    "href": "api/TreeCompressionPipeline.ProcessMonitor.html",
    "title": "Class ProcessMonitor | Komprese stromových struktur",
    "summary": "Class ProcessMonitor Namespace TreeCompressionPipeline Assembly TreeCompressionPipelineLib.dll Jednoduchá implementace observera pro sledování průběhu procesu. Slouží hlavně pro debugging a testování. public class ProcessMonitor : IProcessObserver Inheritance object ProcessMonitor Implements IProcessObserver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnComplete(string, object) Metoda, která je volána při dokončení procesu. public void OnComplete(string process, object result) Parameters process string Název procesu, který byl dokončen. result object Výsledek procesu, který může být libovolného typu. OnError(string, Exception) Metoda, která je volána při chybě v průběhu procesu. public void OnError(string process, Exception error) Parameters process string Název procesu, ve kterém došlo k chybě. error Exception Vyjímka, která popisuje chybu v průběhu procesu. OnProgress(string, double) Metoda, která je volána při průběhu procesu. public void OnProgress(string process, double percentComplete) Parameters process string Název procesu, který je sledován. percentComplete double Procenta dokončení procesu. OnStart(string) Metoda, která je volána při spuštění procesu. public void OnStart(string process) Parameters process string Název procesu, který je spuštěn."
  },
  "api/TreeCompressionPipeline.TreeCreationStrategies.ITreeCreationStrategy-1.html": {
    "href": "api/TreeCompressionPipeline.TreeCreationStrategies.ITreeCreationStrategy-1.html",
    "title": "Interface ITreeCreationStrategy<T> | Komprese stromových struktur",
    "summary": "Interface ITreeCreationStrategy<T> Namespace TreeCompressionPipeline.TreeCreationStrategies Assembly TreeCompressionPipelineLib.dll Strategie pro vytvoření stromové struktury z textu. public interface ITreeCreationStrategy<out T> where T : ITreeNode Type Parameters T Typ stromové struktury, která bude vytvořena. Methods CreateTree(string) Metoda pro vytvoření stromové struktury z textu. T CreateTree(string text) Parameters text string Text, který by se měl převést do stromové struktury. Returns T Vrací vytvořenou stromovou strukturu daného typu."
  },
  "api/TreeCompressionPipeline.TreeCreationStrategies.html": {
    "href": "api/TreeCompressionPipeline.TreeCreationStrategies.html",
    "title": "Namespace TreeCompressionPipeline.TreeCreationStrategies | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionPipeline.TreeCreationStrategies Interfaces ITreeCreationStrategy<T> Strategie pro vytvoření stromové struktury z textu."
  },
  "api/TreeCompressionPipeline.TreeStructure.CompressedTree.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.CompressedTree.html",
    "title": "Class CompressedTree | Komprese stromových struktur",
    "summary": "Class CompressedTree Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll Datová struktura pro uložení komprimované stromové struktury. public class CompressedTree Inheritance object CompressedTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Metadata Metadata komprimované stromové struktury. public Dictionary<string, string> Metadata { get; init; } Property Value Dictionary<string, string> Structure Binární reprezentace komprimované stromové struktury. public byte[] Structure { get; set; } Property Value byte[] Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TreeCompressionPipeline.TreeStructure.IOrderedTreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.IOrderedTreeNode.html",
    "title": "Interface IOrderedTreeNode | Komprese stromových struktur",
    "summary": "Interface IOrderedTreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll Rozhraní stromové struktury, která definuje základní metody pro klasický jakýsi uspořádaný strom. public interface IOrderedTreeNode : ITreeNode Inherited Members ITreeNode.Value Properties Children Potomci uzlu. List<IOrderedTreeNode> Children { get; } Property Value List<IOrderedTreeNode> Parent Rodič uzlu. IOrderedTreeNode? Parent { get; set; } Property Value IOrderedTreeNode Methods Accept(IOrderedTreeVisitor) Přijímání visitora pro zpracování uzlu. void Accept(IOrderedTreeVisitor visitor) Parameters visitor IOrderedTreeVisitor Visitor, který bude zpracovávat uzel. See Also IOrderedTreeVisitor AddChild(IOrderedTreeNode) Přidání potomka do uzlu. void AddChild(IOrderedTreeNode child) Parameters child IOrderedTreeNode Potomek, který bude přidán do uzlu."
  },
  "api/TreeCompressionPipeline.TreeStructure.IOrderedTreeVisitor.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.IOrderedTreeVisitor.html",
    "title": "Interface IOrderedTreeVisitor | Komprese stromových struktur",
    "summary": "Interface IOrderedTreeVisitor Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll Visitor pro zpracování uzlu stromu. public interface IOrderedTreeVisitor Methods Visit(IOrderedTreeNode) void Visit(IOrderedTreeNode node) Parameters node IOrderedTreeNode"
  },
  "api/TreeCompressionPipeline.TreeStructure.ISyntacticTreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.ISyntacticTreeNode.html",
    "title": "Interface ISyntacticTreeNode | Komprese stromových struktur",
    "summary": "Interface ISyntacticTreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll Uzel syntaktického stromu. public interface ISyntacticTreeNode : ITreeNode Inherited Members ITreeNode.Value Properties LeftChildren Leví potomci uzlu, uspořádaní zleva doprava. List<ISyntacticTreeNode> LeftChildren { get; } Property Value List<ISyntacticTreeNode> Parent Rodič uzlu. ISyntacticTreeNode? Parent { get; set; } Property Value ISyntacticTreeNode RightChildren Praví potomci uzlu, uspořádaní zleva doprava. List<ISyntacticTreeNode> RightChildren { get; } Property Value List<ISyntacticTreeNode> Methods Accept(ISyntacticTreeVisitor) void Accept(ISyntacticTreeVisitor visitor) Parameters visitor ISyntacticTreeVisitor AddLeftChild(ISyntacticTreeNode) Přidání potomka do levého podstromu. void AddLeftChild(ISyntacticTreeNode child) Parameters child ISyntacticTreeNode potomek, který bude přidán do levého podstromu. AddRightChild(ISyntacticTreeNode) Přidání potomka do pravého podstromu. void AddRightChild(ISyntacticTreeNode child) Parameters child ISyntacticTreeNode Potomek, který bude přidán do pravého podstromu."
  },
  "api/TreeCompressionPipeline.TreeStructure.ISyntacticTreeVisitor.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.ISyntacticTreeVisitor.html",
    "title": "Interface ISyntacticTreeVisitor | Komprese stromových struktur",
    "summary": "Interface ISyntacticTreeVisitor Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public interface ISyntacticTreeVisitor Methods Visit(ISyntacticTreeNode) void Visit(ISyntacticTreeNode node) Parameters node ISyntacticTreeNode"
  },
  "api/TreeCompressionPipeline.TreeStructure.ITreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.ITreeNode.html",
    "title": "Interface ITreeNode | Komprese stromových struktur",
    "summary": "Interface ITreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll Nejzákladnější rozhraní libovolného uzlu stromu. public interface ITreeNode Properties Value Hodnota uzlu stromu, může být cokoliv. object Value { get; } Property Value object"
  },
  "api/TreeCompressionPipeline.TreeStructure.OrderedTreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.OrderedTreeNode.html",
    "title": "Class OrderedTreeNode | Komprese stromových struktur",
    "summary": "Class OrderedTreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public class OrderedTreeNode : IOrderedTreeNode, ITreeNode Inheritance object OrderedTreeNode Implements IOrderedTreeNode ITreeNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OrderedTreeNode(object) public OrderedTreeNode(object value) Parameters value object Properties Children Potomci uzlu. public List<IOrderedTreeNode> Children { get; } Property Value List<IOrderedTreeNode> Parent Rodič uzlu. public IOrderedTreeNode? Parent { get; set; } Property Value IOrderedTreeNode Value Hodnota uzlu stromu, může být cokoliv. public object Value { get; init; } Property Value object Methods Accept(IOrderedTreeVisitor) Přijímání visitora pro zpracování uzlu. public void Accept(IOrderedTreeVisitor visitor) Parameters visitor IOrderedTreeVisitor Visitor, který bude zpracovávat uzel. See Also IOrderedTreeVisitor AddChild(IOrderedTreeNode) Přidání potomka do uzlu. public void AddChild(IOrderedTreeNode child) Parameters child IOrderedTreeNode Potomek, který bude přidán do uzlu. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TreeCompressionPipeline.TreeStructure.PrintVisitor.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.PrintVisitor.html",
    "title": "Class PrintVisitor | Komprese stromových struktur",
    "summary": "Class PrintVisitor Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public class PrintVisitor : IOrderedTreeVisitor Inheritance object PrintVisitor Implements IOrderedTreeVisitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Visit(IOrderedTreeNode) public void Visit(IOrderedTreeNode node) Parameters node IOrderedTreeNode"
  },
  "api/TreeCompressionPipeline.TreeStructure.SyntacticTreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.SyntacticTreeNode.html",
    "title": "Class SyntacticTreeNode | Komprese stromových struktur",
    "summary": "Class SyntacticTreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public class SyntacticTreeNode : ISyntacticTreeNode, ITreeNode Inheritance object SyntacticTreeNode Implements ISyntacticTreeNode ITreeNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SyntacticTreeNode(string) public SyntacticTreeNode(string value) Parameters value string Properties LeftChildren Leví potomci uzlu, uspořádaní zleva doprava. public List<ISyntacticTreeNode> LeftChildren { get; } Property Value List<ISyntacticTreeNode> Parent Rodič uzlu. public ISyntacticTreeNode? Parent { get; set; } Property Value ISyntacticTreeNode RightChildren Praví potomci uzlu, uspořádaní zleva doprava. public List<ISyntacticTreeNode> RightChildren { get; } Property Value List<ISyntacticTreeNode> Value Hodnota uzlu stromu, může být cokoliv. public object Value { get; } Property Value object Methods Accept(ISyntacticTreeVisitor) public void Accept(ISyntacticTreeVisitor visitor) Parameters visitor ISyntacticTreeVisitor AddLeftChild(ISyntacticTreeNode) Přidání potomka do levého podstromu. public void AddLeftChild(ISyntacticTreeNode child) Parameters child ISyntacticTreeNode potomek, který bude přidán do levého podstromu. AddRightChild(ISyntacticTreeNode) Přidání potomka do pravého podstromu. public void AddRightChild(ISyntacticTreeNode child) Parameters child ISyntacticTreeNode Potomek, který bude přidán do pravého podstromu. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TreeCompressionPipeline.TreeStructure.ToStringVisitor.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.ToStringVisitor.html",
    "title": "Class ToStringVisitor | Komprese stromových struktur",
    "summary": "Class ToStringVisitor Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public class ToStringVisitor : IOrderedTreeVisitor Inheritance object ToStringVisitor Implements IOrderedTreeVisitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Visit(IOrderedTreeNode) public void Visit(IOrderedTreeNode node) Parameters node IOrderedTreeNode"
  },
  "api/TreeCompressionPipeline.TreeStructure.XmlTreeNode.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.XmlTreeNode.html",
    "title": "Class XmlTreeNode | Komprese stromových struktur",
    "summary": "Class XmlTreeNode Namespace TreeCompressionPipeline.TreeStructure Assembly TreeCompressionPipelineLib.dll public class XmlTreeNode : IOrderedTreeNode, ITreeNode Inheritance object XmlTreeNode Implements IOrderedTreeNode ITreeNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XmlTreeNode(string) public XmlTreeNode(string name) Parameters name string Properties Children Potomci uzlu. public List<IOrderedTreeNode> Children { get; } Property Value List<IOrderedTreeNode> Parent Rodič uzlu. public IOrderedTreeNode? Parent { get; set; } Property Value IOrderedTreeNode Value Hodnota uzlu stromu, může být cokoliv. public object Value { get; } Property Value object Methods Accept(IOrderedTreeVisitor) Přijímání visitora pro zpracování uzlu. public void Accept(IOrderedTreeVisitor visitor) Parameters visitor IOrderedTreeVisitor Visitor, který bude zpracovávat uzel. See Also IOrderedTreeVisitor AddChild(IOrderedTreeNode) Přidání potomka do uzlu. public void AddChild(IOrderedTreeNode child) Parameters child IOrderedTreeNode Potomek, který bude přidán do uzlu."
  },
  "api/TreeCompressionPipeline.TreeStructure.html": {
    "href": "api/TreeCompressionPipeline.TreeStructure.html",
    "title": "Namespace TreeCompressionPipeline.TreeStructure | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionPipeline.TreeStructure Classes CompressedTree Datová struktura pro uložení komprimované stromové struktury. OrderedTreeNode PrintVisitor SyntacticTreeNode ToStringVisitor XmlTreeNode Interfaces IOrderedTreeNode Rozhraní stromové struktury, která definuje základní metody pro klasický jakýsi uspořádaný strom. IOrderedTreeVisitor Visitor pro zpracování uzlu stromu. ISyntacticTreeNode Uzel syntaktického stromu. ISyntacticTreeVisitor ITreeNode Nejzákladnější rozhraní libovolného uzlu stromu."
  },
  "api/TreeCompressionPipeline.html": {
    "href": "api/TreeCompressionPipeline.html",
    "title": "Namespace TreeCompressionPipeline | Komprese stromových struktur",
    "summary": "Namespace TreeCompressionPipeline Classes FilterBase<T, TO> Implementace filtru pro pipeline. Filtr je základní jednotka pro zpracování dat v rámci pipeline. FilterFactory<T> Továrna pro vytvoření filtrů v rámci pipeline. Pipeline Pipeline pro zpracování dat v rámci Pipes and Filters architektury. Pipeline je tvořena jednotlivými filtry, které zpracovávají data. ProcessMonitor Jednoduchá implementace observera pro sledování průběhu procesu. Slouží hlavně pro debugging a testování. Interfaces IFilter Rozhraní pro vytvoření filtru v rámci pipeline. Projekt využívá architekturu Pipes and Filters. Filtr představuje jednotku zpracování dat. Dědí z rozhraní IProcessSubject, které definuje metody pro přidání a odebrání observerů. IProcessObserver Definuje rozhraní pro observera, který sleduje průběh procesu. IProcessSubject Rozhraní pro definici subjektu, díky kterému mohou observeři sledovat průběh procesu. ITreeCompressor<T> Rozhraní, které definuje metody pro kompresi a dekompresi stromu."
  },
  "api/TreeStructures.Compressors.DictionaryTreeCompressor-1.html": {
    "href": "api/TreeStructures.Compressors.DictionaryTreeCompressor-1.html",
    "title": "Class DictionaryTreeCompressor<T> | Komprese stromových struktur",
    "summary": "Class DictionaryTreeCompressor<T> Namespace TreeStructures.Compressors Assembly TreeStructures.dll public class DictionaryTreeCompressor<T> : ITreeCompressor<T> Type Parameters T Inheritance object DictionaryTreeCompressor<T> Implements ITreeCompressor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompressTree(TreeNode<T>) public string CompressTree(TreeNode<T> node) Parameters node TreeNode<T> Returns string DecompressTree(string) public TreeNode<T> DecompressTree(string compressedTree) Parameters compressedTree string Returns TreeNode<T>"
  },
  "api/TreeStructures.Compressors.FrequentSubtreeCompressor-1.html": {
    "href": "api/TreeStructures.Compressors.FrequentSubtreeCompressor-1.html",
    "title": "Class FrequentSubtreeCompressor<T> | Komprese stromových struktur",
    "summary": "Class FrequentSubtreeCompressor<T> Namespace TreeStructures.Compressors Assembly TreeStructures.dll public class FrequentSubtreeCompressor<T> : ITreeCompressor<T> Type Parameters T Inheritance object FrequentSubtreeCompressor<T> Implements ITreeCompressor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompressTree(TreeNode<T>) public string CompressTree(TreeNode<T> node) Parameters node TreeNode<T> Returns string DecompressTree(string) public TreeNode<T> DecompressTree(string compressedTree) Parameters compressedTree string Returns TreeNode<T>"
  },
  "api/TreeStructures.Compressors.GrammarCompressor-1.html": {
    "href": "api/TreeStructures.Compressors.GrammarCompressor-1.html",
    "title": "Class GrammarCompressor<T> | Komprese stromových struktur",
    "summary": "Class GrammarCompressor<T> Namespace TreeStructures.Compressors Assembly TreeStructures.dll public class GrammarCompressor<T> : ITreeCompressor<T> Type Parameters T Inheritance object GrammarCompressor<T> Implements ITreeCompressor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompressTree(TreeNode<T>) public string CompressTree(TreeNode<T> node) Parameters node TreeNode<T> Returns string DecompressTree(string) public TreeNode<T> DecompressTree(string compressedTree) Parameters compressedTree string Returns TreeNode<T> PrintGrammar() public void PrintGrammar() ToBinaryFile(string) public void ToBinaryFile(string path) Parameters path string"
  },
  "api/TreeStructures.Compressors.ITreeCompressor-1.html": {
    "href": "api/TreeStructures.Compressors.ITreeCompressor-1.html",
    "title": "Interface ITreeCompressor<T> | Komprese stromových struktur",
    "summary": "Interface ITreeCompressor<T> Namespace TreeStructures.Compressors Assembly TreeStructures.dll public interface ITreeCompressor<T> Type Parameters T Methods CompressTree(TreeNode<T>) string CompressTree(TreeNode<T> node) Parameters node TreeNode<T> Returns string DecompressTree(string) TreeNode<T> DecompressTree(string compressedTree) Parameters compressedTree string Returns TreeNode<T>"
  },
  "api/TreeStructures.Compressors.RePairTreeCompressor-1.html": {
    "href": "api/TreeStructures.Compressors.RePairTreeCompressor-1.html",
    "title": "Class RePairTreeCompressor<T> | Komprese stromových struktur",
    "summary": "Class RePairTreeCompressor<T> Namespace TreeStructures.Compressors Assembly TreeStructures.dll public class RePairTreeCompressor<T> : ITreeCompressor<T> Type Parameters T Inheritance object RePairTreeCompressor<T> Implements ITreeCompressor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompressTree(TreeNode<T>) public string CompressTree(TreeNode<T> node) Parameters node TreeNode<T> Returns string DecompressTree(string) public TreeNode<T> DecompressTree(string compressedTree) Parameters compressedTree string Returns TreeNode<T>"
  },
  "api/TreeStructures.Compressors.html": {
    "href": "api/TreeStructures.Compressors.html",
    "title": "Namespace TreeStructures.Compressors | Komprese stromových struktur",
    "summary": "Namespace TreeStructures.Compressors Classes DictionaryTreeCompressor<T> FrequentSubtreeCompressor<T> GrammarCompressor<T> RePairTreeCompressor<T> Interfaces ITreeCompressor<T>"
  },
  "api/TreeStructures.Direction.html": {
    "href": "api/TreeStructures.Direction.html",
    "title": "Enum Direction | Komprese stromových struktur",
    "summary": "Enum Direction Namespace TreeStructures Assembly TreeStructures.dll public enum Direction Fields Left = 0 Right = 1"
  },
  "api/TreeStructures.Tree-1.html": {
    "href": "api/TreeStructures.Tree-1.html",
    "title": "Class Tree<T> | Komprese stromových struktur",
    "summary": "Class Tree<T> Namespace TreeStructures Assembly TreeStructures.dll public class Tree<T> Type Parameters T Inheritance object Tree<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Tree(T) public Tree(T rootValue) Parameters rootValue T Properties Root public TreeNode<T> Root { get; set; } Property Value TreeNode<T> Methods Find(T) public TreeNode<T>? Find(T value) Parameters value T Returns TreeNode<T> PrintTree() public void PrintTree()"
  },
  "api/TreeStructures.TreeBuilder.html": {
    "href": "api/TreeStructures.TreeBuilder.html",
    "title": "Class TreeBuilder | Komprese stromových struktur",
    "summary": "Class TreeBuilder Namespace TreeStructures Assembly TreeStructures.dll public class TreeBuilder Inheritance object TreeBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TreeStructures.TreeNode-1.html": {
    "href": "api/TreeStructures.TreeNode-1.html",
    "title": "Class TreeNode<T> | Komprese stromových struktur",
    "summary": "Class TreeNode<T> Namespace TreeStructures Assembly TreeStructures.dll public class TreeNode<T> Type Parameters T Inheritance object TreeNode<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TreeNode(T) public TreeNode(T value) Parameters value T Properties Left public List<TreeNode<T>> Left { get; } Property Value List<TreeNode<T>> Right public List<TreeNode<T>> Right { get; } Property Value List<TreeNode<T>> Value public T Value { get; } Property Value T Methods Add(TreeNode<T>, Direction) public void Add(TreeNode<T> node, Direction direction) Parameters node TreeNode<T> direction Direction"
  },
  "api/TreeStructures.html": {
    "href": "api/TreeStructures.html",
    "title": "Namespace TreeStructures | Komprese stromových struktur",
    "summary": "Namespace TreeStructures Classes TreeBuilder TreeNode<T> Tree<T> Enums Direction"
  },
  "architecture/architecture.html": {
    "href": "architecture/architecture.html",
    "title": "Architektura systému | Komprese stromových struktur",
    "summary": "Architektura systému \uD83C\uDFDB️ Modulární struktura Systém je rozdělen do několika modulů, zajišťujících flexibilitu a efektivitu. \uD83D\uDCE6 Analýza textu Modul pro syntaktickou analýzu a generování stromových struktur z textů. Výstupy: Generované stromové struktury. Použité technologie: .NET \uD83E\uDDE0 Detekce vzorců Tento modul identifikuje opakující se vzory ve stromových strukturách, které lze komprimovat. Výstupy: Seznam vzorců pro kompresi. Použité technologie: Algoritmy pro detekci vzorců. ⚙️ Kompresní algoritmy Implementace kompresních metod pro optimalizaci stromových struktur. Typy algoritmů: Huffmanovo kódování, LZW. Výstupy: Komprimované datové struktury. Tip: Každý modul je navržen pro snadnou rozšiřitelnost a testování nových metod. \uD83D\uDCA1 Výhody modulární struktury Flexibilita: Snadno přidáváte nové moduly. Škálovatelnost: Podporuje práci s různými velikostmi dat. Paralelizace: Každý modul lze paralelizovat pro zrychlení výpočtů. IFilter Process(data: object): object Chain(nextFilter: IFilter): IFilter ITreeNode Value: object Children: IList<ITreeNode> AddChild(child: ITreeNode): void Accept(visitor: ITreeVisitor): void ITreeVisitor Visit(node: ITreeNode): void ICompressionStrategy Compress(tree: ITreeNode): CompressedTree Decompress(compressedTree: CompressedTree): ITreeNode FilterFactory CreateSyntacticAnalysisFilter(): IFilter CreateCompressionFilter(strategy: ICompressionStrategy): IFilter CreateDecompressionFilter(strategy: ICompressionStrategy): IFilter SyntacticAnalysisFilter nextFilter: IFilter Process(text: object): object Chain(nextFilter: IFilter): IFilter CompressionFilter nextFilter: IFilter strategy: ICompressionStrategy CompressionFilter(strategy: ICompressionStrategy) Process(tree: object): object Chain(nextFilter: IFilter): IFilter DecompressionFilter nextFilter: IFilter strategy: ICompressionStrategy DecompressionFilter(strategy: ICompressionStrategy) Process(compressedTree: object): object Chain(nextFilter: IFilter): IFilter TreeNode value: object children: List<ITreeNode> Value: object Children: IList<ITreeNode> AddChild(child: ITreeNode): void Accept(visitor: ITreeVisitor): void CompressedTree Patterns: Dictionary<int, ITreeNode> Structure: byte[] Metadata: Dictionary<string, string> CompressionStrategy FindPatterns(tree: ITreeNode): Dictionary<string, int> Compress(tree: ITreeNode): CompressedTree Decompress(compressedTree: CompressedTree): ITreeNode PatternBasedCompression minPatternSize: int maxPatterns: int PatternBasedCompression(minPatternSize: int, maxPatterns: int) Compress(tree: ITreeNode): CompressedTree Decompress(compressedTree: CompressedTree): ITreeNode StatisticalCompression threshold: double StatisticalCompression(threshold: double) Compress(tree: ITreeNode): CompressedTree Decompress(compressedTree: CompressedTree): ITreeNode Pipeline firstFilter: IFilter lastFilter: IFilter AddFilter(filter: IFilter): Pipeline Process(input: object): object TextProcessingFacade pipeline: Pipeline TextProcessingFacade() CompressText(text: string): CompressedTree DecompressTree(compressedTree: CompressedTree): string ValidateDecompression(originalText: string, decompressedText: string): bool IProcessObserver OnStart(process: string): void OnProgress(process: string, percentComplete: double): void OnComplete(process: string, result: object): void OnError(process: string, error: Exception): void ProcessMonitor OnStart(process: string): void OnProgress(process: string, percentComplete: double): void OnComplete(process: string, result: object): void OnError(process: string, error: Exception): void contains chain creates uses uses uses produces consumes/produces notifies"
  },
  "journal/2025-02-19.html": {
    "href": "journal/2025-02-19.html",
    "title": "Journal Entry - 2025-02-19 | Komprese stromových struktur",
    "summary": "Journal Entry - 2025-02-19 Na začátku jsem začal zkoumat různé způsoby, jak strojově sestavit stromové struktury vět nebo jednotlivých slov. Jako první jsem se zaměřil na projekt MorphoDiTa, který slouží k taggingu (tj. přiřazování slovním tvarům jejich gramatických kategorií, jako je slovní druh, pád nebo osoba) a k lemmatizaci (tj. převodu slov na jejich základní tvar – lemma). Pro experimenty jsem vytvořil jednoduchý framework v jazyce C#, ve kterém pomocí základních příkazů testuji tagger a lemmatizaci. Zkoumám také, zda by části lemmatizačního derivativního stromu mohly být využity ke kompresi textu. U menších souborů se může stát, že se velikost spíše zvýší, ale u větších textů by naopak mohla klesnout – to však musím experimentálně ověřit. V této fázi projektu hledám vhodný způsob, jak efektivně sestavit stromové struktury na základě získaných analytických dat. Tagging se zatím jeví jako nejlepší přístup, ale potřebuji najít optimální kritéria pro jejich konstrukci. Našel jsem Dependency Parser Parsito, který by mohl dokázat vytvořit strom. Musím se ještě více naučit jak funguje NLP a tyto algoritmy. Parsito bohužel nefunguje na architekturách ARM64, zároveň je dlouhou dobu nepoužívaný. Release co se mi podařilo stáhnout je z roku 2016. Dále jsem narazil na StanfordNLP, který je momentálně označený za deprecated, tudíž pro mě nejspíš nepoužitelný??? Zároveň mě napadlo, pokud se mi nepodaří rozjet model pro dependency parsing lokálně, mohl bych využít alespoň nějaké REST API. REST API není podporované. Našel jsem knihovnu UDPipe, která má wrapper přímo pro C#, takže by mohla být jednoduše použitelná."
  },
  "journal/2025-02-20.html": {
    "href": "journal/2025-02-20.html",
    "title": "Journal Entry - 2025-02-20 | Komprese stromových struktur",
    "summary": "Journal Entry - 2025-02-20 Pomocí UDPipe 1 a modelu pro angličtinu se mi podařilo úspěšně sestavit syntaktický strom z běžného anglického textu. Projekt byl poměrně náročný, ale nakonec se mi podařilo dosáhnout správných výsledků. Během práce jsem narazil na problém s tokenizací, který ovlivňoval kvalitu dependency parsingu a vedl k nedostatečně přesným výstupům. Po několika experimentech se mi však podařilo problém vyřešit a získat správnou strukturu stromu. Nyní se zaměřím na: Skládání vět do stromových struktur. Testování různých metod komprese pro syntaktické stromy. Porovnání a analýzu výsledků – například ve srovnání s jinými metodami komprese. Cílem je optimalizovat reprezentaci syntaktických stromů, aby bylo možné jazyková data efektivně ukládat a zpracovávat. Použil jsem UDPipe 1, protože: UDPipe 2 je stále experimentální a napsaný v Pythonu. UDPipe 3, který by měl opět nabídnout přívětivé API a bindingy, je teprve ve vývoji."
  },
  "journal/2025-02-23.html": {
    "href": "journal/2025-02-23.html",
    "title": "Journal Entry - 2025-02-23 | Komprese stromových struktur",
    "summary": "Journal Entry - 2025-02-23 1. Sestavení stromové struktury Po úspěšném testování se mi podařilo sestavit stromovou strukturu z textových dat. Tento proces zahrnoval: Parsování vstupního textu. Vytvoření stromové struktury, kde každý uzel obsahuje určitou hodnotu z textu. Levý a pravý podstrom byly generovány na základě specifických pravidel vycházejících z textového formátu. 2. Komprese stromu pomocí gramatiky Po sestavení stromové struktury jsem provedl kompresi pomocí gramatiky. Tento postup spočíval v: Nahradit opakující se podstromy jedinečnými pravidly. Redukce velikosti stromu, kde každý unikátní podstrom získal vlastní pravidlo (např. R1, R2 atd.), což vedlo k výrazné kompresi struktury. 3. Další možný krok: Použití metody RePair Vzhledem k úspěšnosti gramatické komprese bych rád pokračoval v testování metody RePair. Tato metoda je známá svou efektivitou při: Hledání opakujících se vzorců v textových datech. Nahrazení těchto vzorců symboly, což vede k další redukci velikosti dat. Plánuji implementovat metodu RePair a testovat její vliv na kompresi stromu, abych zjistil, zda poskytne lepší výsledky než aktuální metoda gramatické komprese. 4. Problém se seřazením dat v levé a pravé větvi Jedním z problémů, na které jsem narazil, je potřeba seřazení dat v obou větvích stromu (levé i pravé). Tento problém může ovlivnit výsledky komprese, protože: Neoptimalizované seřazení dat může vést k ztrátě kompresní účinnosti. Momentálně nejsem úplně jistý, jak správně data uspořádat, aby komprese probíhla co nejefektivněji. 5. Další kroky Pro řešení výše uvedeného problému plánuju: Analyzovat možné přístupy k seřazení dat, které by mohly optimalizovat kompresi. Experimentovat s různými metodami uspořádání dat ve stromě pro dosažení co nejlepšího výsledku."
  },
  "journal/2025-03-10.html": {
    "href": "journal/2025-03-10.html",
    "title": "\uD83D\uDCC5 2025-02-25 - Výzkum a implementace algoritmů pro kompresi stromových struktur | Komprese stromových struktur",
    "summary": "\uD83D\uDCC5 2025-02-25 - Výzkum a implementace algoritmů pro kompresi stromových struktur Dnes jsem se zaměřil na implementaci a výzkum různých existujících algoritmů pro kompresi stromových struktur. Prozkoumal jsem tři hlavní algoritmy: DictionaryTreeCompression, FrequentSubtreeCompression a RePairTreeCompressor. Každý z těchto algoritmů má své výhody a specifické využití v závislosti na druhu dat, která se komprimují. Tento výzkum mi pomohl lépe pochopit, jak každý z těchto přístupů funguje a jak je možné je využít pro optimalizaci komprese stromů ve svém projektu. \uD83D\uDCDA Algoritmy pro kompresi stromových struktur 1. DictionaryTreeCompression Tento algoritmus je známý svou efektivitou při kompresi dat ve stromových strukturách, přičemž je běžně používán pro kompresi XML dat a dalších hierarchických datových formátů. Funguje tak, že vytváří slovník, který obsahuje opakující se podstromy. Každý podstrom je reprezentován klíčem ve slovníku, což umožňuje kompresi tím, že místo opakovaných podstromů se používá pouze jejich klíč. Tento přístup výrazně snižuje velikost dat, zejména pokud existují rekurentní vzory. Možnosti využití: Tento algoritmus bych mohl použít pro kompresi stromových struktur, které vykazují vysokou míru opakování v jejich podstrukturoch. V budoucnu by se mohl ukázat jako efektivní pro kompresi syntaktických stromů, pokud se budou vyskytovat opakující se vzory, například v dlouhých větách nebo textových blocích. 2. FrequentSubtreeCompression Tento algoritmus se zaměřuje na kompresi častých podstromů, což znamená, že hledá podstromy, které se vyskytují často v celém stromu, a nahrazuje je jedinečnými identifikátory. Tento přístup je často používán v bioinformatice pro kompresi dat, jako jsou filogenetické stromy, a v dalších oblastech, kde se často opakují určité struktury. Možnosti využití: Tento algoritmus by mohl být užitečný, pokud budu pracovat s rozsáhlými daty, kde některé podstromy nebo vzory struktury stromu mohou být velmi časté. V budoucnu se ukáže jako vhodný pro kompresi složitějších stromových struktur s vysokou mírou opakování, což je typické pro texty s mnoha podobnými větami. 3. RePairTreeCompressor RePair je algoritmus, který se zaměřuje na nalezení opakujících se vzorců v datech a jejich nahrazení symboly, což vede k výrazné redukci velikosti. Tento algoritmus je oblíbený pro kompresi textů a XML dat a je známý svou efektivitou při hledání a nahrazování opakujících se podstruktur. Možnosti využití: RePair je vhodný pro situace, kdy je potřeba efektivně komprimovat velké množství dat, a to zejména když se v datech nachází podobné podstruktury. Tento algoritmus by mohl být jedním z klíčových nástrojů pro mojí implementaci kompresního algoritmu, zejména pokud budu mít problém s velkým množstvím opakujících se vzorců v syntaktických stromech. \uD83D\uDEE0️ Implementace a experimenty V rámci implementace jsem se nejprve zaměřil na základní verzi každého algoritmu: DictionaryTreeCompression: Začal jsem implementací jednoduchého slovníku pro ukládání opakujících se podstromů. Testoval jsem ho na několika příkladech textu, kde jsem hledal opakující se fráze. FrequentSubtreeCompression: Tento algoritmus jsem implementoval tak, že jsem prohledával strom a identifikoval podstromy, které se vyskytovaly častěji než ostatní. Tyto podstromy jsem nahradil identifikátory. RePairTreeCompressor: Tento algoritmus jsem implementoval s využitím principu iterativní komprese, kde se v každé iteraci hledají a nahrazují opakující se vzory. Implementace vyžadovala dostatečně efektivní způsob, jak zpracovávat a ukládat nalezené vzory. \uD83D\uDE80 Výsledky a zhodnocení Během implementace jsem se hodně naučil o těchto algoritmech a jejich výhodách: DictionaryTreeCompression se osvědčil jako efektivní pro kompresi textových stromů, ale je méně efektivní při zpracování stromů s nižšími mírami opakování. FrequentSubtreeCompression je velmi silný při kompresi dat, kde se vyskytují časté vzory. Může být užitečný pro struktury s výrazným opakováním. RePairTreeCompressor se ukázal jako nejlepší pro moji aplikaci, protože je schopný najít opakující se vzory a komprimovat je velmi efektivně, zejména u velkých stromů. \uD83D\uDCA1 Co dál? V budoucnu bych chtěl: Porovnat výkon těchto algoritmů na reálných datech. Vytvořit hybridní metodu, která by kombinovala výhody jednotlivých algoritmů. Testovat na větších datech, abych zjistil, jak se chovají při vyšší složitosti a větší velikosti stromu. Celkově jsem se naučil hodně o tom, jak algoritmy pro kompresi stromů fungují a jak je lze aplikovat na různé typy dat. Zatím se mi nejvíce osvědčil RePair, ale stále je prostor pro optimalizace a zlepšení."
  },
  "journal/journal.html": {
    "href": "journal/journal.html",
    "title": "\uD83D\uDCDD Journal - Komprese stromových struktur | Komprese stromových struktur",
    "summary": "\uD83D\uDCDD Journal - Komprese stromových struktur V tomto deníku dokumentuji postup a experimenty, které provádím při vývoji metody pro kompresi stromových struktur v rámci mého projektu. Cílem je optimalizovat způsob, jakým jsou syntaktické stromy reprezentovány, aby bylo možné efektivněji ukládat a zpracovávat jazyková data. \uD83C\uDFAF Cíl projektu Projekt se zaměřuje na vývoj a testování různých metod pro kompresi syntaktických stromů, které jsou výsledkem analýzy textu. Věnuji se zkoumání různých nástrojů pro dependency parsing, zpracování textu a tvorbě kompresních algoritmů, jako je gramatická komprese nebo metoda RePair. \uD83D\uDCD3 Jak deník pomáhá Každý zápis v deníku se zaměřuje na konkrétní denní pokrok, nové výzvy, řešení a testování nových metod. Je to pro mě způsob, jak sledovat vývoj projektu krok za krokem a zároveň poskytnout ostatním náhled na to, jak se projekt vyvíjí. Zápisky obsahují: \uD83D\uDD2C Experimenty s různými nástroji pro syntaktickou analýzu. \uD83E\uDDE9 Testování metod komprese, jako je gramatická komprese a RePair. ⚠️ Problémy, na které jsem narazil při implementaci, a způsoby, jak je řešit. \uD83D\uDE80 Plány do budoucna, jak projekt posunout dál. Každý zápis je podrobný a dokumentuje jak technické kroky, tak teoretické úvahy a rozhodnutí. \uD83D\uDD0E Prozkoumejte jednotlivé záznamy Pokud máte zájem o podrobnosti, můžete si prohlédnout jednotlivé zápisky z deníku podle data. Každý zápis je zaměřen na konkrétní fázi vývoje a řešení, která jsem v daný den řešil. \uD83D\uDCC5 2025-02-19 \uD83D\uDCC5 2025-02-20 \uD83D\uDCC5 2025-02-23 Tento deník je nejen záznamem pro mě, ale také způsobem, jak sdílet moje pokroky s ostatními a získat zpětnou vazbu na implementované metody."
  },
  "requirements/requirements.html": {
    "href": "requirements/requirements.html",
    "title": "Požadavky na systém | Komprese stromových struktur",
    "summary": "Požadavky na systém ⚙️ Funkční požadavky Analýza textu: Systém musí generovat stromové struktury. Detekce vzorců: Identifikace opakujících se vzorců ve stromových datech. Kompresní algoritmy: Aplikace kompresních metod. Dekomprese: Obnovení komprimovaných stromů. \uD83D\uDCCB Systémové požadavky Komponenta Požadavek Hardware 8 GB RAM, více-jádrový procesor OS Linux, Windows, macOS \uD83D\uDEE0️ Ne-funkční požadavky Výkon: Schopnost zpracovávat soubory o velikosti několika GB. Modularita: Snadná rozšiřitelnost o nové moduly. Bezpečnost: Zajištění ochrany dat. Poznámka: Tyto požadavky zajišťují výkon a flexibilitu pro různé velikosti dat."
  }
}