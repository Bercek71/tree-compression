@startuml
skinparam classAttributeIconSize 0

' Interfaces
interface IFilter {
  +Process(object data): object
  +Chain(IFilter nextFilter): IFilter
}

interface IProcessSubject {
  +AddObserver(IProcessObserver observer)
  +RemoveObserver(IProcessObserver observer)
  #NotifyStart(string process)
  #NotifyProgress(string process, double percentComplete)
  #NotifyComplete(string process, object result)
  #NotifyError(string process, Exception error)
}

interface IProcessObserver {
  +OnStart(string process)
  +OnProgress(string process, double percentComplete)
  +OnComplete(string process, object result)
  +OnError(string process, Exception error)
}

interface "ITreeCompressor<T>" as ITreeCompressor {
  #CompressionStrategy: ICompressionStrategy<T>
  #CompressingPipeline: Pipeline
  #DecompressingPipeline: Pipeline
  +Compress(string text): CompressedTree
  +Decompress(CompressedTree compressedTree): string
}

interface "ICompressionStrategy<T>" as ICompressionStrategy {
  +Compress(T tree): CompressedTree
  +Decompress(CompressedTree compressedTree): T
}

interface "ITreeCreationStrategy<T>" as ITreeCreationStrategy {
  +CreateTree(string text): T
}

' Abstract classes
abstract "FilterBase<T,TO>" as FilterBase {
  -_nextFilter: IFilter?
  -_processObservers: List<IProcessObserver>
  #ProcessData(T data): TO
  +Process(object data): object
  +Chain(IFilter nextFilter): IFilter
  +AddObserver(IProcessObserver observer)
  +RemoveObserver(IProcessObserver observer)
  +NotifyStart(string process)
  +NotifyProgress(string process, double percentComplete)
  +NotifyComplete(string process, object result)
  +NotifyError(string process, Exception error)
}

abstract "FilterFactory<T>" as FilterFactory {
  +CreateTextToTreeFilter(ITreeCreationStrategy<T> strategy): IFilter
  +CreateCompressionFilter(ICompressionStrategy<T> strategy): IFilter
  +CreateDecompressionFilter(ICompressionStrategy<T> strategy): IFilter
}

' Concrete classes
class Pipeline {
  -_firstFilter: IFilter?
  -_lastFilter: IFilter?
  +ProcessObserver: IProcessObserver?
  +AddFilter(IFilter filter): Pipeline
  +Process(object input): object
}

class ProcessTimer {
  +OnStart(string process)
  +OnProgress(string process, double percentComplete)
  +OnComplete(string process, object result)
  +OnError(string process, Exception error)
}

class "TextToTreeFilter<T>" as TextToTreeFilter {
  -creationStrategy: ITreeCreationStrategy<T>
  #ProcessData(string text): T
}

class "CompressionFilter<T>" as CompressionFilter {
  -strategy: ICompressionStrategy<T>
  #ProcessData(T tree): CompressedTree
}

class "DecompressionFilter<T>" as DecompressionFilter {
  -strategy: ICompressionStrategy<T>
  #ProcessData(CompressedTree compressedTree): T
}

class TreeRepairStrategy

' Relationships
IFilter --|> IProcessSubject

FilterBase ..|> IFilter

TextToTreeFilter --|> FilterBase
CompressionFilter --|> FilterBase
DecompressionFilter --|> FilterBase

ProcessTimer ..|> IProcessObserver

TreeRepairStrategy ..|> ICompressionStrategy

Pipeline o-- IFilter
Pipeline o-- IProcessObserver

IFilter -- IProcessObserver : observes >

FilterFactory -- TextToTreeFilter : creates >
FilterFactory -- CompressionFilter : creates >
FilterFactory -- DecompressionFilter : creates >

TextToTreeFilter --> ITreeCreationStrategy

DependencyParingStrategy ..|> ITreeCreationStrategy

CompressionFilter --> ICompressionStrategy
DecompressionFilter --> ICompressionStrategy

ITreeCompressor --> ICompressionStrategy
ITreeCompressor o--> Pipeline

@enduml